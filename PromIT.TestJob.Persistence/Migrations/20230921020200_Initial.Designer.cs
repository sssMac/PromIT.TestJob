// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PromIT.TestJob.Persistence;

#nullable disable

namespace PromIT.TestJob.Persistence.Migrations
{
    [DbContext(typeof(ReviewsDbContext))]
    [Migration("20230921020200_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a5f00ba5-73c9-40cf-a8dc-4da34b2ec086",
                            ConcurrencyStamp = "922dc172-15f5-431e-93b7-1788f3f3ba03",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1c9b9b73-517e-4749-b183-b80583da38c1",
                            ConcurrencyStamp = "b1be3726-851c-4e22-a626-cbb21348fcc7",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("PromIT.TestJob.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PromIT.TestJob.Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrgAddress")
                        .HasColumnType("text");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhatDislike")
                        .HasColumnType("text");

                    b.Property<string>("WhatLike")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("256907b4-e958-4683-bcab-3069e97c7823"),
                            CreatedAt = new DateTime(2021, 4, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgName = "ABC Inc.",
                            Rating = 4,
                            UserName = "JohnDoe",
                            WhatDislike = "Long commute",
                            WhatLike = "Friendly colleagues"
                        },
                        new
                        {
                            Id = new Guid("282ebf54-7973-421b-901c-e0e8c5ce49c7"),
                            CreatedAt = new DateTime(2021, 8, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "456 Elm St",
                            OrgName = "XYZ Corp.",
                            Rating = 5,
                            UserName = "JaneSmith",
                            WhatLike = "Flexible hours"
                        },
                        new
                        {
                            Id = new Guid("2b371052-2e01-430a-869d-d97a516f84a5"),
                            CreatedAt = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "789 Oak St",
                            OrgName = "LMN Ltd.",
                            Rating = 3,
                            UserName = "BobJohnson",
                            WhatDislike = "No remote work",
                            WhatLike = "Great benefits"
                        },
                        new
                        {
                            Id = new Guid("ee0d75b2-0904-463c-9671-11315b10fec6"),
                            CreatedAt = new DateTime(2022, 9, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgName = "PQR Co.",
                            Rating = 4,
                            UserName = "AliceJohnson",
                            WhatLike = "Work-life balance"
                        },
                        new
                        {
                            Id = new Guid("63483ea2-3340-4870-a677-2d4f3c305845"),
                            CreatedAt = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "202 Pine St",
                            OrgName = "RST Group",
                            Rating = 3,
                            UserName = "EveAdams",
                            WhatDislike = "High workload",
                            WhatLike = "Opportunities for growth"
                        },
                        new
                        {
                            Id = new Guid("387f2d1b-0e13-43a4-a2f6-b6e287796358"),
                            CreatedAt = new DateTime(2022, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "303 Cedar St",
                            OrgName = "UVW Inc.",
                            Rating = 4,
                            UserName = "DavidLee",
                            WhatDislike = "Lack of training",
                            WhatLike = "Diverse team"
                        },
                        new
                        {
                            Id = new Guid("4fbfeee1-a6c0-46b2-be35-a9387076a609"),
                            CreatedAt = new DateTime(2023, 8, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "404 Birch St",
                            OrgName = "HIJ Corporation",
                            Rating = 5,
                            UserName = "GraceWang",
                            WhatDislike = "Micromanagement",
                            WhatLike = "Innovative projects"
                        },
                        new
                        {
                            Id = new Guid("5179f33d-ff84-40ac-9d85-6dc41794f2d8"),
                            CreatedAt = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgName = "ABC Inc.",
                            Rating = 4,
                            UserName = "JohnDoe",
                            WhatDislike = "Long commute",
                            WhatLike = "Friendly colleagues"
                        },
                        new
                        {
                            Id = new Guid("5377ae6d-24b3-440f-9791-e3f517821199"),
                            CreatedAt = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "456 Elm St",
                            OrgName = "XYZ Corp.",
                            Rating = 5,
                            UserName = "JaneSmith",
                            WhatLike = "Flexible hours"
                        },
                        new
                        {
                            Id = new Guid("d6fa53c4-485a-4cff-99eb-eb99a352386d"),
                            CreatedAt = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "789 Oak St",
                            OrgName = "LMN Ltd.",
                            Rating = 3,
                            UserName = "BobJohnson",
                            WhatDislike = "No remote work",
                            WhatLike = "Great benefits"
                        },
                        new
                        {
                            Id = new Guid("d7895ad6-2288-423d-9935-ae42b9517a14"),
                            CreatedAt = new DateTime(2020, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgName = "PQR Co.",
                            Rating = 4,
                            UserName = "AliceJohnson",
                            WhatLike = "Work-life balance"
                        },
                        new
                        {
                            Id = new Guid("eeddf878-bdd5-47c6-a90d-18a08f7b8c1e"),
                            CreatedAt = new DateTime(2022, 3, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "202 Pine St",
                            OrgName = "RST Group",
                            Rating = 3,
                            UserName = "EveAdams",
                            WhatDislike = "High workload",
                            WhatLike = "Opportunities for growth"
                        },
                        new
                        {
                            Id = new Guid("e0da5076-7070-4aef-a578-390594e3cf0e"),
                            CreatedAt = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgAddress = "303 Cedar St",
                            OrgName = "UVW Inc.",
                            Rating = 4,
                            UserName = "DavidLee",
                            WhatDislike = "Lack of training",
                            WhatLike = "Diverse team"
                        },
                        new
                        {
                            Id = new Guid("2fa14d15-338a-4e24-8b44-933e2e0c36e7"),
                            CreatedAt = new DateTime(2020, 12, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            OrgName = "HIJ Corporation",
                            Rating = 5,
                            UserName = "GraceWang",
                            WhatDislike = "Micromanagement",
                            WhatLike = "Innovative projects"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromIT.TestJob.Domain.Comment", b =>
                {
                    b.HasOne("PromIT.TestJob.Domain.Review", null)
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromIT.TestJob.Domain.Review", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
